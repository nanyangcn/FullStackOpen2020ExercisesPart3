{"version":3,"sources":["services/note.js","index.js"],"names":["baseUrl","axios","get","then","res","data","newObject","post","id","delete","put","Filter","persons","setPersonsShow","useState","filter","setFilter","value","onChange","event","personsFilter","person","name","toLowerCase","includes","target","PersonForm","setPersons","setAddMessage","setErrorMessage","newName","setNewName","newNumber","setNewNumber","onSubmit","preventDefault","personObject","number","Math","floor","random","Number","MAX_SAFE_INTEGER","nameRepeat","length","window","confirm","personsReplace","replaceId","personsCopy","index","findIndex","copyAndChange","noteService","catch","setTimeout","response","concat","type","Person","onClick","personsAfterDelete","Persons","personsShow","map","key","Message","message","className","App","addMessage","errorMessage","useEffect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d59a06b.chunk.js","sourcesContent":["import axios from 'axios'\n\n// const baseUrl = 'https://lit-beach-60745.herokuapp.com/api/persons'\nconst baseUrl = '/api/persons'\n// const baseUrl = 'http://localhost:3001/persons'\n\nconst getAll = () => {\n  return(\n    axios\n      .get(baseUrl)\n      .then(res => res.data)\n  )\n}\n\nconst create = (newObject) => {\n  return(\n    axios\n      .post(baseUrl, newObject)\n      .then(res => res.data)\n  )\n}\n\nconst remove = (id) => {\n  return(\n    axios\n      .delete(`${baseUrl}/${id}`)\n      .then(res => res.data)\n  )\n}\n\nconst update = (id, newObject) => {\n  return(\n    axios\n      .put(`${baseUrl}/${id}`, newObject)\n      .then(res => res.data)\n  )\n}\n\nexport default { getAll, create, remove, update }","import ReactDOM from 'react-dom';\nimport React, { useEffect, useState } from 'react'\nimport noteService from './services/note.js'\nimport './index.css'\n\nconst Filter = ({ persons, setPersonsShow}) => {\n  const [ filter, setFilter ] = useState('')\n  \n  const handleFilterChange = (event) => {\n    const personsFilter = persons.filter(person => \n      person.name.toLowerCase().includes(event.target.value))\n    setFilter(event.target.value)\n    setPersonsShow(personsFilter)\n  }\n\n  return(\n    <div>\n      filter show with\n      <input \n        value={filter}\n        onChange={handleFilterChange}\n      />\n    </div>\n  )\n}\n\nconst PersonForm = ({ persons, setPersons, setPersonsShow, setAddMessage, setErrorMessage }) => {\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    \n    const newIdnumber = () => {\n      // if (persons.length === 0){\n      //   return(1)\n      // }\n      // else {\n      //   return(Math.max(...persons.map(value => value.id)) + 1)\n      // }\n      return(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER))\n    }\n\n    const personObject ={\n      name: newName,\n      number: newNumber,\n      id: newIdnumber()\n    }\n    \n    const nameRepeat = persons.filter(person => person.name === newName)\n\n    if (nameRepeat.length !== 0) { // replace\n      const replaceFlag = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)\n\n      if (replaceFlag) {\n        const copyAndChange = (persons, replaceId, newNumber) => {\n          let personsCopy = [...persons]\n  \n          const index = personsCopy.findIndex(value => value.id === replaceId)\n  \n          personsCopy[index].number = newNumber\n  \n          return(personsCopy)\n        }\n\n        const personsReplace = copyAndChange(persons, nameRepeat[0].id, personObject.number)\n        setPersons(personsReplace)\n        setPersonsShow(personsReplace)\n\n        noteService\n          .update(nameRepeat[0].id, personObject)\n          .then(() => setAddMessage('Update sucessfully'))\n          .catch(() => {\n            setErrorMessage(`Update fail`)\n            setTimeout(() => setErrorMessage(null), 5000)\n          })\n      }\n    }\n    else if (newName !== '' || newNumber !== '') { // add\n\n      noteService\n        .create(personObject)\n        .then((response) => {\n          personObject.id = response.id\n          setAddMessage(`Added ${newName}`)\n          setTimeout(() => setAddMessage(null), 5000)\n        })\n        .catch(() => {\n          setErrorMessage(`Post fail`)\n          setTimeout(() => setErrorMessage(null), 5000)\n        })\n      \n      setPersons(persons.concat(personObject))\n    }\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n\n  return(\n    <form onSubmit={addPerson}>\n      <table>\n      <tbody>\n        <tr>\n          <td>name:</td>\n          <td>\n            <input \n              value={newName}\n              onChange={handleNameChange}\n            />\n          </td>\n        </tr>\n        <tr>\n          <td>number:</td>\n          <td>\n            <input \n              value={newNumber}\n              onChange={handleNumberChange}\n            />\n          </td>\n        </tr>\n      </tbody>\n      </table>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>  \n  )\n}\n\nconst Person = ({ person, persons, setPersons, setPersonsShow, setAddMessage, setErrorMessage }) => {\n  const personDelete = () => {\n    const personsAfterDelete = persons.filter(value => value.id !== person.id )\n\n    setPersons(personsAfterDelete)\n    setPersonsShow(personsAfterDelete)\n\n    noteService\n      .remove(person.id)\n      .then(() => setAddMessage('Delete sucessfully'))\n      .catch(() => {\n        setErrorMessage(`Information of ${person.name} has already beed removed from server`)\n        setTimeout(() => setErrorMessage(null), 5000)\n      })\n  }\n  return(\n    <tr>\n      <td>{person.name}</td>\n      <td>{person.number}</td>\n      <td><button onClick={personDelete}>delete</button></td>\n    </tr>\n  )\n}\n\nconst Persons = ({ persons, setPersons, setPersonsShow, personsShow, setAddMessage, setErrorMessage}) => {\n  return(\n    <table>\n    <tbody>\n      {personsShow.map(person => \n        <Person key={person.id} person={person}\n        persons={persons} setPersons={setPersons} setPersonsShow={setPersonsShow}\n        setAddMessage={setAddMessage} setErrorMessage={setErrorMessage}\n        />\n      )}\n    </tbody>\n  </table>  \n  )\n}\n\nconst Message = ({ message, className }) => {\n  if (message === null)\n    return (null)\n  else\n    return(\n      <div>\n        <p className={className}>{message}</p>\n      </div>\n    )\n}\n\nconst App = () => {\n\n  const [ persons, setPersons ] = useState([])\n  const [ personsShow, setPersonsShow ] = useState(persons)\n  const [ addMessage, setAddMessage ] = useState(null)\n  const [ errorMessage, setErrorMessage ] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(response => setPersons(response))\n      .catch(() => {\n        setErrorMessage(`Get data fail from the server`)\n        setTimeout(() => setErrorMessage(null), 5000)\n      })\n  }, [])\n\n  useEffect(() => setPersonsShow(persons), [persons])\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Message message={addMessage} className='message' />\n      <Message message={errorMessage} className='error' />\n      <Filter\n        persons={persons} setPersonsShow={setPersonsShow} setErrorMessage={setErrorMessage}\n      />\n      <h3>Add a new</h3>\n      <PersonForm\n        persons={persons} setPersons={setPersons} setPersonsShow={setPersonsShow}\n        addMessage={addMessage} setAddMessage={setAddMessage}\n        setErrorMessage={setErrorMessage}\n      />\n      <h3>Numbers</h3>\n      <Persons\n        persons={persons} setPersons={setPersons}\n        personsShow={personsShow} setPersonsShow={setPersonsShow}\n        setAddMessage={setAddMessage} setErrorMessage={setErrorMessage}\n      />\n    </div>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}